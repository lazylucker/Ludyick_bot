import random
import logging
import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.utils import executor
from aiogram.utils.callback_data import CallbackData
from datetime import datetime, timedelta

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
API_TOKEN = 'YOUR_BOT_API_TOKEN'  # –£–∫–∞–∂–∏ —Å–≤–æ–π —Ç–æ–∫–µ–Ω

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

# –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–ª–±—ç–∫–æ–≤
game_callback = CallbackData('game', 'action')

# –°–∏–º–≤–æ–ª—ã –¥–ª—è —Å–ª–æ—Ç–æ–≤
SYMBOLS = ['üçí', 'üçã', 'üçâ', 'üçä', 'üçì', 'üçÄ', 'üçá', '‚≠ê', 'üî•']
WINNING_COMBINATIONS = {
    'üçí': 5,
    'üçã': 10,
    'üçâ': 15,
    'üçä': 20,
    'üçì': 25,
    'üçÄ': 50,
    'üçá': 100,
    '‚≠ê': 200,
    'üî•': 500,
}
MIN_BET = 100  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞ = 1 –º–æ–Ω–µ—Ç–∞

# –õ–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–æ–∫
logging.basicConfig(level=logging.INFO)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –∏–≥—Ä–æ–∫–∞
players = {}
game_sessions = {}

# –†–µ–π—Ç–∏–Ω–≥ –∏–≥—Ä–æ–∫–æ–≤ –ø–æ –±–∞–ª–∞–Ω—Å—É
monthly_ranking = {}

# –ö–æ–ª–µ—Å–æ —Ñ–æ—Ä—Ç—É–Ω—ã
FORTUNE_WHEEL_REWARDS = [10, 20, 50, 100, 200, -10]  # –†–∞–Ω–¥–æ–º–Ω—ã–µ –≤—ã–∏–≥—Ä—ã—à–∏ –∏–ª–∏ –ø–æ—Ç–µ—Ä—è –º–æ–Ω–µ—Ç
FORTUNE_WHEEL_COST = 0  # –ö–æ–ª–µ—Å–æ –±–µ—Å–ø–ª–∞—Ç–Ω–æ–µ, –º–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∞ –ª—é–±—É—é —Ü–µ–Ω—É

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –∏–≥—Ä–æ–∫–∞
def get_balance(user_id):
    return players.get(user_id, {'balance': 1000})['balance']

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –∏–≥—Ä–æ–∫–∞
def update_balance(user_id, amount):
    players[user_id] = {'balance': get_balance(user_id) + amount}

# –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–µ–π—Ç–∏–Ω–≥–∞ –∑–∞ –º–µ—Å—è—Ü
def update_monthly_ranking(user_id):
    current_month = datetime.now().strftime('%Y-%m')
    if current_month not in monthly_ranking:
        monthly_ranking[current_month] = []

    player_balance = get_balance(user_id)
    player_name = players.get(user_id, {}).get('name', 'Unknown')
    monthly_ranking[current_month].append((user_id, player_name, player_balance))

# –ö–æ–ª–µ—Å–æ —Ñ–æ—Ä—Ç—É–Ω—ã
def spin_fortune_wheel():
    return random.choice(FORTUNE_WHEEL_REWARDS)

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–µ–π—Ç–∏–Ω–≥–∞
@dp.message_handler(commands=['rating'])
async def show_rating(message: types.Message):
    current_month = datetime.now().strftime('%Y-%m')
    if current_month not in monthly_ranking or not monthly_ranking[current_month]:
        await message.answer("‚ùóÔ∏è–†–µ–π—Ç–∏–Ω–≥ –µ—â–µ –Ω–µ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω.")
        return

    # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –±–∞–ª–∞–Ω—Å—É, –æ—Ç –±–æ–ª—å—à–µ–≥–æ –∫ –º–µ–Ω—å—à–µ–º—É
    sorted_players = sorted(monthly_ranking[current_month], key=lambda x: x[2], reverse=True)

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å —Ä–µ–π—Ç–∏–Ω–≥–æ–º
    ranking_text = "üèÜ –†–µ–π—Ç–∏–Ω–≥ –∏–≥—Ä–æ–∫–æ–≤ –∑–∞ –º–µ—Å—è—Ü:\n"
    for idx, (user_id, player_name, player_balance) in enumerate(sorted_players, 1):
        ranking_text += f"{idx}. {player_name} - {player_balance} –º–æ–Ω–µ—Ç\n"
    
    await message.answer(ranking_text)

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ª—É—á—à–µ–≥–æ –∏–≥—Ä–æ–∫–∞
@dp.message_handler(commands=['best_player'])
async def show_best_player(message: types.Message):
    current_month = datetime.now().strftime('%Y-%m')
    if current_month not in monthly_ranking or not monthly_ranking[current_month]:
        await message.answer("‚ùóÔ∏è–õ—É—á—à–∏–π –∏–≥—Ä–æ–∫ –µ—â–µ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω.")
        return

    # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –±–∞–ª–∞–Ω—Å—É, –æ—Ç –±–æ–ª—å—à–µ–≥–æ –∫ –º–µ–Ω—å—à–µ–º—É
    sorted_players = sorted(monthly_ranking[current_month], key=lambda x: x[2], reverse=True)
    
    best_player = sorted_players[0]
    user_id, player_name, player_balance = best_player

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ª—É—á—à–µ–≥–æ –∏–≥—Ä–æ–∫–∞
    await message.answer(f"üèÜ –õ—É—á—à–∏–π –∏–≥—Ä–æ–∫ –º–µ—Å—è—Ü–∞: {player_name} —Å –±–∞–ª–∞–Ω—Å–æ–º {player_balance} –º–æ–Ω–µ—Ç.")

# –ü—Ä–æ–≤–µ—Ä–∫–∞, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –±–æ—Ç –≤ —á–∞—Ç–µ
async def check_if_in_group(message: types.Message):
    if message.chat.type != 'supergroup':
        await message.answer("‚ùóÔ∏è–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–±–∞–≤—å—Ç–µ –º–µ–Ω—è –≤ –≥—Ä—É–ø–ø—É, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∏–≥—Ä–∞—Ç—å.")
        return False
    return True

# –°—Ç–∞—Ä—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∏–≥—Ä—ã
@dp.message_handler(commands=['ludic'])
async def start_game(message: types.Message):
    if not await check_if_in_group(message):
        return

    user_id = message.from_user.id
    players[user_id] = {'balance': 1000, 'name': message.from_user.first_name}  # –ù–∞—á–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å –∏ –∏–º—è

    markup = InlineKeyboardMarkup(row_width=2)
    button1 = InlineKeyboardButton("üé∞ –°–ª–æ—Ç—ã", callback_data=game_callback.new(action='slots'))
    button2 = InlineKeyboardButton("üÉè –ë–ª—ç–∫–¥–∂–µ–∫", callback_data=game_callback.new(action='blackjack'))
    button3 = InlineKeyboardButton("üé≤ –†—É–ª–µ—Ç–∫–∞", callback_data=game_callback.new(action='roulette'))
    button4 = InlineKeyboardButton("üéâ –ö–æ–ª–µ—Å–æ —Ñ–æ—Ä—Ç—É–Ω—ã", callback_data=game_callback.new(action='fortune_wheel'))
    markup.add(button1, button2, button3, button4)

    await message.answer(f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}! –í–∞—à –±–∞–ª–∞–Ω—Å: {get_balance(user_id)} –º–æ–Ω–µ—Ç.\n"
                         "–í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä—É:", reply_markup=markup)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∏–≥—Ä—ã
@dp.callback_query_handler(game_callback.filter())
async def handle_game_selection(callback_query: types.CallbackQuery, callback_data: dict):
    action = callback_data['action']
    user_id = callback_query.from_user.id

    if action == 'slots':
        await slots_menu(callback_query.message, user_id)
    elif action == 'blackjack':
        await blackjack_menu(callback_query.message, user_id)
    elif action == 'roulette':
        await roulette_menu(callback_query.message, user_id)
    elif action == 'fortune_wheel':
        await fortune_wheel(callback_query.message, user_id)

# –ú–µ–Ω—é —Å—Ç–∞–≤–æ–∫ –¥–ª—è –∏–≥—Ä—ã –≤ —Å–ª–æ—Ç—ã
async def slots_menu(message: types.Message, user_id):
    markup = InlineKeyboardMarkup(row_width=2)
    button1 = InlineKeyboardButton(f"1 –º–æ–Ω–µ—Ç–∞ üí∏", callback_data=game_callback.new(action='slots_bet_1'))
    button2 = InlineKeyboardButton(f"5 –º–æ–Ω–µ—Ç ü§ë", callback_data=game_callback.new(action='slots_bet_5'))
    button3 = InlineKeyboardButton(f"10 –º–æ–Ω–µ—Ç üí∞", callback_data=game_callback.new(action='slots_bet_10'))
    button4 = InlineKeyboardButton("üõë –í—ã–π—Ç–∏ –∏–∑ –∏–≥—Ä—ã", callback_data=game_callback.new(action='exit'))
    markup.add(button1, button2, button3, button4)

    await message.answer(f"–í–∞—à –±–∞–ª–∞–Ω—Å: {get_balance(user_id)} –º–æ–Ω–µ—Ç.\n–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∞–≤–∫—É –¥–ª—è –∏–≥—Ä—ã –≤ —Å–ª–æ—Ç—ã:", reply_markup=markup)

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª–æ—Ç–æ–≤ (–±–∞—Ä–∞–±–∞–Ω—ã)
def spin_slots(lines=3):
    result = []
    for _ in range(lines):
        result.append([random.choice(SYMBOLS) for _ in range(3)])  # 3 –±–∞—Ä–∞–±–∞–Ω–∞, 1 –ª–∏–Ω–∏—è
    return result

# –ü–æ–¥—Å—á–µ—Ç –≤—ã–∏–≥—Ä—ã—à–∞
def calculate_win(slots_result):
    win = 0
    for line in slots_result:
        if len(set(line)) == 1:  # –í—Å–µ —Å–∏–º–≤–æ–ª—ã –æ–¥–∏–Ω–∞–∫–æ–≤—ã
            symbol = line[0]
            win += WINNING_COMBINATIONS.get(symbol, 0)
    return win

# –°—Ç–∞–≤–∫–∏ –Ω–∞ —Å–ª–æ—Ç–∞—Ö
@dp.callback_query_handler(game_callback.filter(action='slots_bet_1'))
async def slots_bet_1(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    bet_amount = 1
    if get_balance(user_id) < bet_amount:
        await callback_query.answer("–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç –¥–ª—è —ç—Ç–æ–π —Å—Ç–∞–≤–∫–∏.", show_alert=True)
        return

    await callback_query.answer("üîÑ –ò–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å...")

    # –¢–∞–π–º-–∞—É—Ç –ø–µ—Ä–µ–¥ —Å–ø–∏–Ω–æ–º, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å —ç—Ñ—Ñ–µ–∫—Ç –æ–∂–∏–¥–∞–Ω–∏—è
    await asyncio.sleep(1)

    slots_result = spin_slots()
    win = calculate_win(slots_result)

    result_text = "üé∞ –†–µ–∑—É–ª—å—Ç–∞—Ç –∏–≥—Ä—ã:\n"
    for line in slots_result:
        result_text += " | ".join(line) + "\n"
    
    if win > 0:
        result_text += f"‚úÖ –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ {win} –º–æ–Ω–µ—Ç!"
        update_balance(user_id, win)
    else:
        result_text += "‚ùå –í—ã –Ω–µ –≤—ã–∏–≥—Ä–∞–ª–∏."

    update_monthly_ranking(user_id)
    await callback_query.message.answer(result_text)
    await callback_query.message.answer(f"–í–∞—à –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {get_balance(user_id)} –º–æ–Ω–µ—Ç.")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã—Ö–æ–¥–∞ –∏–∑ –∏–≥—Ä—ã
@dp.callback_query_handler(game_callback.filter(action='exit'))
async def exit_game(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    await callback_query.message.delete()  # –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ —Ç–µ–∫—É—â–µ–π –∏–≥—Ä–µ

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å
    await callback_query.message.answer(f"–ò–≥—Ä–æ–∫ {callback_query.from_user.first_name} –ø–æ–∫–∏–Ω—É–ª –∏–≥—Ä—É. –í–∞—à —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å: {get_balance(user_id)} –º–æ–Ω–µ—Ç.")
    
    # –£–¥–∞–ª—è–µ–º –∏–∑ —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏ –∏–≥—Ä—ã
    if user_id in game_sessions:
        del game_sessions[user_id]
