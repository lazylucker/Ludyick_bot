import logging
import json
from aiogram import Bot, Dispatcher, types
from aiogram.utils import executor
from datetime import datetime
import os

API_TOKEN = os.getenv("API_TOKEN")  # –ë–µ—Ä–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
RANKING_FILE = "ranking.json"

logging.basicConfig(level=logging.INFO)

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

# –§—É–Ω–∫—Ü–∏–∏ —Ä–∞–±–æ—Ç—ã —Å —Ä–µ–π—Ç–∏–Ω–≥–æ–º
def load_ranking():
    try:
        with open(RANKING_FILE, 'r') as f:
            return json.load(f)
    except FileNotFoundError:
        return {}

def save_ranking(ranking):
    with open(RANKING_FILE, 'w') as f:
        json.dump(ranking, f)

# –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message_handler(commands=['start'])
async def cmd_start(message: types.Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –ù–∞–ø–∏—à–∏ '–õ—É–¥–∏–∫' –≤ —á–∞—Ç, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É!")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ "–õ—É–¥–∏–∫"
@dp.message_handler(lambda message: message.text.lower() == '–ª—É–¥–∏–∫')
async def start_game(message: types.Message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("–°–ª–æ—Ç", "–ë–ª—ç–∫–¥–∂–µ–∫", "–†—É–ª–µ—Ç–∫–∞", "–†–µ–π—Ç–∏–Ω–≥", "–ö–æ–ª–µ—Å–æ –§–æ—Ä—Ç—É–Ω—ã")
    await message.answer("üé∞ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –õ—É–¥–∏–∫! –í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä—É:", reply_markup=markup)

# –í—ã–±–æ—Ä –∏–≥—Ä—ã
@dp.message_handler(lambda message: message.text in ['–°–ª–æ—Ç', '–ë–ª—ç–∫–¥–∂–µ–∫', '–†—É–ª–µ—Ç–∫–∞', '–ö–æ–ª–µ—Å–æ –§–æ—Ä—Ç—É–Ω—ã'])
async def game_choice(message: types.Message):
    game = message.text.lower()
    if game == '—Å–ª–æ—Ç':
        await message.answer("üé∞ –ó–∞–ø—É—Å–∫–∞—é —Å–ª–æ—Ç-–º–∞—à–∏–Ω—É!")
    elif game == '–±–ª—ç–∫–¥–∂–µ–∫':
        await message.answer("üÉè –ó–∞–ø—É—Å–∫–∞—é –±–ª—ç–∫–¥–∂–µ–∫!")
    elif game == '—Ä—É–ª–µ—Ç–∫–∞':
        await message.answer("üé° –ó–∞–ø—É—Å–∫–∞—é —Ä—É–ª–µ—Ç–∫—É!")
    elif game == '–∫–æ–ª–µ—Å–æ —Ñ–æ—Ä—Ç—É–Ω—ã':
        await message.answer("üé° –ö—Ä—É—á—É –∫–æ–ª–µ—Å–æ —Ñ–æ—Ä—Ç—É–Ω—ã!")

# –†–µ–π—Ç–∏–Ω–≥ –∏–≥—Ä–æ–∫–æ–≤
@dp.message_handler(commands=['rating'])
async def show_rating(message: types.Message):
    ranking = load_ranking()
    current_month = datetime.now().strftime('%Y-%m')

    if current_month not in ranking or not ranking[current_month]:
        await message.answer("‚ùóÔ∏è –†–µ–π—Ç–∏–Ω–≥ –µ—â–µ –Ω–µ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω.")
        return

    sorted_players = sorted(ranking[current_month], key=lambda x: x[2], reverse=True)

    ranking_text = "üèÜ –†–µ–π—Ç–∏–Ω–≥ –∏–≥—Ä–æ–∫–æ–≤ –∑–∞ –º–µ—Å—è—Ü:\n"
    for idx, (user_id, player_name, player_balance) in enumerate(sorted_players, 1):
        ranking_text += f"{idx}. {player_name} - {player_balance} –º–æ–Ω–µ—Ç\n"

    await message.answer(ranking_text)

# –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–µ–π—Ç–∏–Ω–≥–∞
def update_monthly_ranking(user_id):
    current_month = datetime.now().strftime('%Y-%m')
    ranking = load_ranking()

    if current_month not in ranking:
        ranking[current_month] = []

    player_balance = 100
    player_name = "–ò–≥—Ä–æ–∫"
    ranking[current_month].append((user_id, player_name, player_balance))

    save_ranking(ranking)

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
